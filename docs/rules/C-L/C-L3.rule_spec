%title: SPACES

%description: When using a space as a separator, one and only one space
 character must be used.

Tabulations cannot be used as a separator.

Always place a space after a comma or a keyword (if it has arguments).
However, there must be no spaces between the name of a function and the opening
 parenthesis, after a unary operator, or before a semicolon.

In the precise case of a for control structure, if a semicolon inside the
 parentheses is not immediately followed by another semicolon, it must be
 followed by a space.

All binary and ternary operators must be separated from their arguments by a
 space on both sides.

return is a keyword, but sizeof is an unary operator.

```c
return 1;                                          /* OK */
return (1);                                        /* OK */
return (1);                                        /* C-L3 violation */
return (1 +  2);                                   /* C - L3 violation */
break;                                             /* OK */
break ;                                            /* C - L3 violation */
sum = term1 + 2 * term2;                           /* OK */
s = sizeof(struct file);                           /* OK */
s = sizeof (struct file );                         /* C-L3 violation */
for (size_t i; str[i] != '\0'; i++) {              /* OK */
    ...
}
for (size_t i;str[i] != '\0' ; i++) {              /* C - L3 violation ( twice ) */
    ...
}
```

%severity: 2
%check: 2

%file_type: *.c *.h
